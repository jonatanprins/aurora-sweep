/**
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping-term-ms = <200>;
};

/ {
    behaviors {
        ad_i: adaptive_i {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_I";
            #binding-cells = <0>;
            defaults = <&kp I>;
            bindings = <&kp J>;
            antecedents = <I>;
            max-delay-ms = <250>;
        };

        hmrl: hmrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 15 16 17 18 25 26 27 28 32 33 8 9 18 19 28 29>;
        };

        hmrr: hmrr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_layer_num {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&sl 3>;
            slow-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W          &kp F         &kp P         &kp B    &kp J  &kp L         &kp U         &kp Y          &kp SQT
&kp A  &hmrl LCTRL R  &hmrl LALT S  &hmrl LGUI T  &kp G    &kp M  &hmrr RGUI N  &hmrr RALT E  &hmrr RCTRL I  &kp O
&kp Z  &kp X          &kp C         &kp D         &kp V    &kp K  &kp H         &kp COMMA     &kp DOT        &kp SEMI
&sl 2  &sk LSHFT                                                                              &kp SPACE      &sl 1
            >;
        };

        left_layer {
            bindings = <
&kp ESCAPE  &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp TILDE      &kp CARET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp GRAVE
&kp MINUS   &kp ASTERISK      &kp EQUAL       &kp UNDER             &kp DOLLAR     &kp HASH   &sk RGUI               &sk RIGHT_ALT    &sk RIGHT_CONTROL  &kp RIGHT_SHIFT
&kp PLUS    &kp PIPE          &kp AT_SIGN     &kp FSLH              &kp PERCENT    &none      &kp BSLH               &kp AMPS         &kp QUESTION       &kp EXCL
&trans      &trans                                                                                                                    &trans             &trans
            >;
        };

        right_layer {
            bindings = <
&trans     &trans     &kp COLON  &kp ESCAPE  &trans    &kp TAB  &trans    &kp UP_ARROW  &trans     &kp LA(BSPC)
&sk LSHFT  &sk LCTRL  &sk LALT   &sk LGUI    &trans    &trans   &kp LEFT  &kp DOWN      &kp RIGHT  &kp BSPC
&trans     &trans     &trans     &trans      &trans    &trans   &trans    &trans        &trans     &kp ENTER
&trans     &trans                                                                       &trans     &trans
            >;
        };

        num_layer {
            bindings = <
&kp N7     &kp N5     &kp N3    &kp N1    &kp N9    &kp N8  &kp N0    &kp N2         &kp N4             &kp N6
&sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans    &trans  &sk RGUI  &sk RIGHT_ALT  &sk RIGHT_CONTROL  &kp RIGHT_SHIFT
&trans     &trans     &trans    &trans    &trans    &trans  &trans    &trans         &trans             &trans
&trans     &trans                                                                    &trans             &trans
            >;
        };

        tri_layer {
            bindings = <
&kp NUM_1   &kp NUM_2   &kp NUM_3   &kp NUM_4  &kp NUM_5    &trans  &trans     &trans        &trans      &trans
&kp F1      &kp F2      &kp F3      &kp F4     &kp F5       &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &kp F6     &kp F7       &trans  &kp PG_DN  &kp K_VOL_DN  &trans      &trans
&trans      &trans                                                                           &trans      &trans
            >;
        };
    };
};
